// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.9.3'
       // classpath 'com.android.tools.build:gradle:2.3.0'

    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
//-----------------------------------
// def my_abis() { return  ["x86", "x86_64", "armeabi-v7a", "mips", "armeabi", "arm64-v8a", "mips64"] }  // some abis (eg "x86_64") require android platform_ver: 21 or newer
def my_abis() { return  ["armeabi-v7a"] }


def my_compileSdkVersion(){ return 26 }
def my_buildToolsVersion() { return '26.0.0'}
def my_minSdkVersion(){ return 16}
def my_targetSdkVersion() { return my_compileSdkVersion().asType(Integer)}


//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

def want_gcc(){ return true}

def tc_family()     { return want_gcc()? "gnu" : "llvm"}                        // "gnu"  (for gcc) or "llvm" (for clang)
def tc_name()       { return want_gcc()? "gcc" : "clang" }                      // "gcc" or "clang"
def tc_ver()        {return want_gcc()? "4.9" :  "3.5"}// "3.6", "3.7" (for clang)  or "4.9" , "5"  (for gcc)
def std_lib ()     { return want_gcc()? "gnustl_shared" : "c++_shared"}               // "gnustl_shared" or "c++_shared"

//---------------------


//-----------------------

def platform_ver(){return 9}


def platform_dir()      { return "${ndk_dir()}/platforms/android-${platform_ver()}" }


def boost_dir() { return local_props("boost.dir") }

 def boost_inc_dir() { return "${boost_dir()}/include" }
 def boost_lib_dir() { return "${boost_dir()}/libs" }





//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------

//-------------------------------------------------
def local_props(key) { // version = "ndk.dir" or "ndk.dir.nightly"
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}


